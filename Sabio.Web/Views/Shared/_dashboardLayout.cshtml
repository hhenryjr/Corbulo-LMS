@model Sabio.Web.Models.ViewModels.BaseViewModel
<!DOCTYPE html>
<!--[if IE 8]>         <html class="no-js lt-ie9"> <![endif]-->
<!--[if IE 9]>         <html class="no-js lt-ie10"> <![endif]-->
<!--[if gt IE 9]><!-->
<html class="no-js">
<!--<![endif]-->
<head>
    <meta charset="utf-8">

    <title>@Model.BrandName - @Model.BrandTagline</title>

    <meta name="description" content="@Model.BrandDescription">
    <meta name="author" content="@Model.BrandName">
    <meta name="robots" content="noindex, nofollow">

    <meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1.0">

    <!-- Icons -->
    <!-- The following icons can be replaced with your own, they are used by desktop and mobile browsers -->
    <link rel="shortcut icon" href="/img/favicon.png">
    <link rel="apple-touch-icon" href="/img/icon57.png" sizes="57x57">
    <link rel="apple-touch-icon" href="/img/icon72.png" sizes="72x72">
    <link rel="apple-touch-icon" href="/img/icon76.png" sizes="76x76">
    <link rel="apple-touch-icon" href="/img/icon114.png" sizes="114x114">
    <link rel="apple-touch-icon" href="/img/icon120.png" sizes="120x120">
    <link rel="apple-touch-icon" href="/img/icon144.png" sizes="144x144">
    <link rel="apple-touch-icon" href="/img/icon152.png" sizes="152x152">
    <link rel="apple-touch-icon" href="/img/icon180.png" sizes="180x180">
    <!-- END Icons -->
    <!-- Stylesheets -->
    <!-- Bootstrap is included in its original form, unaltered -->
    <link rel="stylesheet" href="/css/bootstrap.min.css">

    <!-- Related styles of various icon packs and plugins -->
    <link rel="stylesheet" href="/css/plugins.css">

    <!-- The main stylesheet of this template. All Bootstrap overwrites are defined in here -->
    <link rel="stylesheet" href="/css/main.css">

    <!-- Include a specific file here from css/themes/ folder to alter the default theme of the template -->
    <!-- The themes stylesheet of this template (for using specific theme color in individual elements - must included last) -->
    <link rel="stylesheet" href="/css/themes.css">

    <link rel="stylesheet" href="/content/lms.css">
    <link href="~/Content/toastr.css" rel="stylesheet" />
    <!-- END Stylesheets -->
    <!-- Modernizr (browser feature detection library) & Respond.js (enables responsive CSS code on browsers that don't support it, eg IE8) -->
    <script src="/js/vendor/modernizr-respond.min.js"></script>


    @RenderSection("styles", required: false)
</head>
<body data-ng-app="sabioApp">
    <!-- Page Wrapper -->
    <!-- In the PHP version you can set the following options from inc/config file -->
    <!--
        Available classes:

        'page-loading'      enables page preloader
    -->
    <div id="page-wrapper">
        <!-- Preloader -->
        <!-- Preloader functionality (initialized in js/app.js) - pageLoading() -->
        <!-- Used only if page preloader is enabled from inc/config (PHP version) or the class 'page-loading' is added in #page-wrapper element (HTML version) -->
        <div class="preloader themed-background">
            <h1 class="push-top-bottom text-light text-center"><strong>Pro</strong>UI</h1>
            <div class="inner">
                <h3 class="text-light visible-lt-ie9 visible-lt-ie10"><strong>Loading..</strong></h3>
                <div class="preloader-spinner hidden-lt-ie9 hidden-lt-ie10"></div>
            </div>
        </div>
        <!-- END Preloader -->
        <!-- Page Container -->
        <!-- In the PHP version you can set the following options from inc/config file -->
        <!--
            Available #page-container classes:

            '' (None)                                       for a full main and alternative sidebar hidden by default (> 991px)

            'sidebar-visible-lg'                            for a full main sidebar visible by default (> 991px)
            'sidebar-partial'                               for a partial main sidebar which opens on mouse hover, hidden by default (> 991px)
            'sidebar-partial sidebar-visible-lg'            for a partial main sidebar which opens on mouse hover, visible by default (> 991px)
            'sidebar-mini sidebar-visible-lg-mini'          for a mini main sidebar with a flyout menu, enabled by default (> 991px + Best with static layout)
            'sidebar-mini sidebar-visible-lg'               for a mini main sidebar with a flyout menu, disabled by default (> 991px + Best with static layout)

            'sidebar-alt-visible-lg'                        for a full alternative sidebar visible by default (> 991px)
            'sidebar-alt-partial'                           for a partial alternative sidebar which opens on mouse hover, hidden by default (> 991px)
            'sidebar-alt-partial sidebar-alt-visible-lg'    for a partial alternative sidebar which opens on mouse hover, visible by default (> 991px)

            'sidebar-partial sidebar-alt-partial'           for both sidebars partial which open on mouse hover, hidden by default (> 991px)

            'sidebar-no-animations'                         add this as extra for disabling sidebar animations on large screens (> 991px) - Better performance with heavy pages!

            'style-alt'                                     for an alternative main style (without it: the default style)
            'footer-fixed'                                  for a fixed footer (without it: a static footer)

            'disable-menu-autoscroll'                       add this to disable the main menu auto scrolling when opening a submenu

            'header-fixed-top'                              has to be added only if the class 'navbar-fixed-top' was added on header.navbar
            'header-fixed-bottom'                           has to be added only if the class 'navbar-fixed-bottom' was added on header.navbar

            'enable-cookies'                                enables cookies for remembering active color theme when changed from the sidebar links data-ng-controller="$dashboardController as dashboard
        -->
        <div id="page-container" class="header-fixed-top sidebar-partial sidebar-visible-lg sidebar-no-animations" data-ng-controller="$dashboardController as dashboard">
            <!-- Alternative Sidebar -->
            <!-- END Alternative Sidebar -->
            <!-- Main Sidebar -->
            <div id="sidebar" data-ng-controller="$sidebarController as sidebar">
                <!-- Wrapper for scrolling functionality -->
                <div id="sidebar-scroll">
                    <!-- Sidebar Content -->
                    <div class="sidebar-content">
                        <!-- Brand -->
                        <div class="sidebar-brand">
                            <span class="sidebar-nav-mini-hide"><strong>@Model.BrandName</strong></span><i class="gi gi-flash"></i>
                        </div>
                        <!-- END Brand -->
                        <!-- User Info -->
                        @if (Model.IsLoggedIn)
                        {
                            <div class="sidebar-section sidebar-user clearfix sidebar-nav-mini-hide">
                                <div class="sidebar-user-avatar">
                                    <a href="#">


                                        @if (Model.UserProfile != null && Model.UserProfile.AvatarPhotoPath != null)
                                        {
                                            <img ng-src="Https://sabio-training.s3-us-west-2.amazonaws.com/C11/@Model.UserProfile.AvatarPhotoPath" alt="avatar">
                                        }
                                        else
                                        {
                                            <img src="/img/placeholders/avatars/avatar2.jpg" alt="avatar">
                                        }
                                    </a>
                                </div>
                                <div class="sidebar-user-name">
                                    @if (Model.IsLoggedIn && Model.UserProfile != null)
                                    {
                                        <div> @Model.UserProfile.FirstName @Model.UserProfile.LastName</div>
                                    }

                                </div>

                                <div class="sidebar-user-links">
                                    <a href="/user/current" data-toggle="tooltip" data-placement="bottom" title="Profile"><i class="gi gi-user"></i></a>
                                    <a href="/logout" data-toggle="tooltip" data-placement="bottom" title="Logout"><i class="gi gi-exit"></i></a>
                                </div>
                            </div>
                        }
                        else
                        {
                            <div class="sidebar-section sidebar-user clearfix sidebar-nav-mini-hide">
                                <div class="sidebar-user-avatar">
                                    @if (Model.IsLoggedIn && Model.UserProfile != null
                                        && !String.IsNullOrWhiteSpace(Model.UserProfile.AvatarPhotoPath))
                                    {
                                        <img ng-src="Https://sabio-training.s3-us-west-2.amazonaws.com/C11/@Model.UserProfile.AvatarPhotoPath" alt="avatar">
                                    }
                                    else
                                    {
                                        @*<img src="/img/sabioimg.png" alt="avatar">*@
                                    }

                                </div>
                                <div class="sidebar-user-name">
                                    @if (Model.IsLoggedIn && Model.UserProfile != null)
                                    {
                                        <div> @Model.UserProfile.FirstName @Model.UserProfile.LastName</div>
                                    }

                                </div>
                                <div class="sidebar-user-links">
                                    <a href="/user/current" data-toggle="tooltip" data-placement="bottom" title="Profile"><i class="gi gi-user"></i></a>
                                    <a href="/logout" data-toggle="tooltip" data-placement="bottom" title="Logout"><i class="gi gi-exit"></i></a>
                                </div>
                            </div>
                        }
                        <!-- END User Info -->
                        <!-- Theme Colors -->
                        <!-- Change Color Theme functionality can be found in js/app.js - templateOptions() -->
                        <!-- END Theme Colors -->
                        <!-- Sidebar Navigation -->
                        @if (Model.IsLoggedIn)
                        {
                            if (Model.HasWikiTreeNavigation)
                            {
                                @Html.Partial("Partials/_sideNavWiki")
                            }
                            else
                            {
                                @Html.Partial("Partials/_sideNavLoggedIn")
                            }
                        }
                        else
                        {
                            @Html.Partial("Partials/_sideNavAnonymous")
                        }
                        <!-- END Sidebar Navigation -->
                        <!-- Sidebar Notifications -->
                        <!-- END Sidebar Notifications -->
                    </div>
                    <!-- END Sidebar Content -->
                </div>
                <!-- END Wrapper for scrolling functionality -->
            </div>
            <!-- END Main Sidebar -->
            <!-- Main Container -->
            <div id="main-container">
                <!-- Header -->
                <!-- In the PHP version you can set the following options from inc/config file -->
                <!--
                    Available header.navbar classes:

                    'navbar-default'            for the default light header
                    'navbar-inverse'            for an alternative dark header

                    'navbar-fixed-top'          for a top fixed header (fixed sidebars with scroll will be auto initialized, functionality can be found in js/app.js - handleSidebar())
                        'header-fixed-top'      has to be added on #page-container only if the class 'navbar-fixed-top' was added

                    'navbar-fixed-bottom'       for a bottom fixed header (fixed sidebars with scroll will be auto initialized, functionality can be found in js/app.js - handleSidebar()))
                        'header-fixed-bottom'   has to be added on #page-container only if the class 'navbar-fixed-bottom' was added
                -->
                <header class="navbar navbar-default navbar-fixed-top">
                    <!-- Left Header Navigation -->
                    <ul class="nav navbar-nav-custom">
                        <!-- Main Sidebar Toggle Button -->
                        <li>
                            <a href="javascript:void(0)" onclick="App.sidebar('toggle-sidebar');this.blur();">
                                <i class="fa fa-bars fa-fw"></i>
                            </a>
                        </li>
                        <!-- END Main Sidebar Toggle Button -->
                        <!-- Template Options -->
                        <!-- Change Options functionality can be found in js/app.js - templateOptions() -->
                        <li class="btn-toolbar">
                            @****userSettings****@
                            <a href="javascript:void(0)" class="enable-tooltip" data-placement="bottom" title="Settings" data-ng-click="dashboard.open()" ;>
                                <i class="gi gi-cogwheels"></i>
                            </a>
                        </li>
                        <li class="btn-toolbar">
                            <a href="javascript:void(0)" data-toggle="tooltip" data-placement="bottom" title="Check In" data-ng-click="dashboard.onAttendance()">
                                <i class="gi gi-check"></i>
                            </a>
                        </li>
                        <!-- END Template Options -->
                    </ul>
                    <!-- END Left Header Navigation -->
                    <!-- Search Form -->
                    <!-- END Search Form -->
                    <!-- Right Header Navigation -->
                    <ul class="nav navbar-nav-custom pull-right">
                        @****contactUs****@
                        <li>
                            <a href="javascript:void(0)" class="enable-tooltip" data-placement="bottom" id="modal-messaging-contactMessage.html" title="Contact Us" data-ng-click="dashboard.openContact()" ;>
                                <i class="fa fa-comments"></i>
                                <span><small> Contact US</small></span>
                            </a>
                        </li>
                        <!-- Alternative Sidebar Toggle Button -->
                        <!-- END Alternative Sidebar Toggle Button -->
                        <!-- User Dropdown -->
                        <li class="dropdown">
                            <a href="#" class="dropdown-toggle" data-toggle="dropdown">
                                @if (Model.UserProfile != null && Model.UserProfile.AvatarPhotoPath != null)
                                {
                                    <img ng-src="Https://sabio-training.s3-us-west-2.amazonaws.com/C11/@Model.UserProfile.AvatarPhotoPath" alt="avatar">
                                    <i class="fa fa-angle-down"></i>
                                }
                                else
                                {
                                    <img src="/img/placeholders/avatars/avatar2.jpg" alt="avatar">
                                    <i class="fa fa-angle-down"></i>
                                }
                            </a>
                            <ul class="dropdown-menu dropdown-custom dropdown-menu-right">
                                <li class="dropdown-header text-center">Account</li>
                                <li>
                                    @*<a href="page_ready_timeline.html">
                                            <i class="fa fa-clock-o fa-fw pull-right"></i>
                                            <span class="badge pull-right">10</span>
                                            Updates
                                        </a>*@
                                    <a href="/FAQ">
                                        <i class="fa fa-question fa-fw pull-right"></i>
                                        FAQ
                                    </a>
                                </li>
                                <li class="divider"></li>
                                <li>
                                    <a href="/profiles">
                                        <i class="fa fa-user fa-fw pull-right"></i>
                                        Profile
                                    </a>
                                    <!-- Opens the user settings modal that can be found at the bottom of each page (page_footer.html in PHP version) -->
                                    <a href="#" data-ng-click="dashboard.open()" data-toggle="modal">
                                        <i class="fa fa-cog fa-fw pull-right"></i>
                                        Settings
                                    </a>
                                </li>
                                <li class="divider"></li>
                                <li>
                                    <a href="page_ready_lock_screen.html"><i class="fa fa-lock fa-fw pull-right"></i> Lock Account</a>
                                    <a href="/logout"><i class="fa fa-ban fa-fw pull-right"></i> Logout</a>
                                </li>
                            </ul>
                        </li>
                        <!-- END User Dropdown -->
                    </ul>
                    <!-- END Right Header Navigation -->
                </header>
                <!-- END Header -->
                <!-- Page content -->
                <div id="page-content">
                    <!-- Fixed Top Header Header -->
                    @RenderBody()
                    <!-- END Dummy Content -->
                </div>
                <!-- END Page Content -->
                <!-- Footer -->
                <footer class="clearfix">
                    <div class="pull-left">
                        <span id="year-copy"></span> &copy; <a href="#" target="_blank">@Model.BrandName</a> @Model.BrandTagline
                    </div>
                </footer>
                <!-- END Footer -->
            </div>
            <!-- END Main Container -->
        </div>
        <!-- END Page Container -->
    </div>
    <!-- END Page Wrapper -->
    <!-- Scroll to top link, initialized in js/app.js - scrollToTop() -->
    <a href="#" id="to-top"><i class="fa fa-angle-double-up"></i></a>
    <!-- jQuery, Bootstrap.js, jQuery plugins and Custom JS code -->
    <script src="/js/vendor/jquery-1.11.3.min.js"></script>
    <script src="/js/vendor/bootstrap.min.js"></script>
    <script src="/js/plugins.js"></script>
    <script src="/js/app.js"></script>
    <script src="~/Scripts/sabio.js"></script>
    <script src="~/Scripts/ng/angular.js"></script>
    @RenderSection("pageInitScripts", required: false)
    <script src="~/Scripts/ng/angular-animate.js"></script>
    <script src="~/Scripts/ng/angular-route.js"></script>
    <script src="~/Scripts/ng/angular-sanitize.js"></script>
    <script src="~/Scripts/ui-bootstrap-tpls-0.14.2.min.js"></script>
    <script src="~/Scripts/sabio.services.roles.js"></script>
    <script src="~/Scripts/sabio.services.messaging.js"></script>
    <script src="~/Scripts/sabio.services.userSettings.js"></script>
    <script src="~/Scripts/sabio.services.attendance.js"></script>
    <script src="~/Scripts/sabio.profiles.services.js"></script>
    <script src="~/Scripts/sabio.profiles.services.js"></script>
    
    <script src="~/Scripts/sabio.ng.app.js"></script>
    <script src="~/Scripts/app/layout/controllers/header.js"></script>
    <script src="~/Scripts/app/services/eventHandlerService.js"></script>
    <script src="~/Scripts/app/services/alertService.js"></script>
    <script src="~/Scripts/app/services/userRoleService.js"></script>
    <script src="~/Scripts/app/services/roleService.js"></script>
    <script src="~/Scripts/sabio.tests.services.js"></script>
    <script src="~/Scripts/ng/angular-ui-tree.js"></script>
    <script src="~/Scripts/sabio.services.dashboardSidebar.js"></script>
    <script src="~/Scripts/app/services/utilityService.js"></script>
    
    <script type="text/javascript">
        sabio.extraNgDependencies = ['ui.bootstrap'];
    </script>
    <script src="~/Scripts/toastr.js"></script>
    <script type="text/javascript">

        sabio.services.userDashboardFactory = function ($baseService) {
            var aSabioServiceObject = sabio.profiles.services.users;
            var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);
            return newService;
        }

        sabio.services.dashboardSidebarFactory = function ($baseService) {
            var aSabioServiceObject = sabio.services.dashboardSidebar;
            var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);
            return newService;
        }

        sabio.services.modalFactory = function ($baseService) {
            var aSabioServiceObject = sabio.services.userSettings;
            var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);
            return newService;
        }

        sabio.services.contactFactory = function ($baseService) {
            var aSabioServiceObject = sabio.services.messaging;
            var newService = $baseService.merge(true, {}, aSabioServiceObject, $baseService);
            return newService;
        }

        sabio.page.sidebarControllerFactory = function ($scope, $baseController, $sidebarServices, $userdashboardService, $userRoleService, $rolesService) {

            var vm = this;

            $baseController.merge(vm, $baseController);

            vm.$sidebarServices = $sidebarServices;
            vm.$userdashboardService = $userdashboardService
            vm.$userRoleService = $userRoleService;
            vm.$rolesService = $rolesService;

            vm.$scope = $scope;

            vm.receiveItems = _receiveItems;
            vm.onReceiveError = _onReceiveError;
            vm.getWikiSpaceById = _getWikiSpaceById;
            vm.getInfoSuccess = _getInfoSuccess;
            vm.getInfoError = _getInfoError;
            vm.getRolesSuccess = _getRolesSuccess;
            vm.getRolesError = _getRolesError;
            vm.getUserRolesSuccess = _getUserRolesSuccess;
            vm.getUserRolesError = _getUserRolesError;
            vm.getAccess = _getAccess;

            vm.notify = vm.$sidebarServices.getNotifier($scope);

            render();

            function render() {
                settings();
                vm.$sidebarServices.getAllSpaces(vm.receiveItems, vm.onReceiveError);
                //vm.$userRoleService.getUserRole();
                vm.$userdashboardService.getUserInfoByUserId(vm.getInfoSuccess, vm.getInfoError);
                vm.$rolesService.getRoles(vm.getRolesSuccess, vm.getRolesError);
            }

            function _getWikiSpaceById(id) {
                if (location.href == "http://lms.dev/") {
                    window.location = "http://lms.dev/Wiki/Navbar/" + id;
                } else {
                    window.location = "http://lms.dev/Wiki/Navbar/" + id;
                }
            }

            function _getRolesSuccess(response) {
                vm.$userRoleService.getRoles(response);
            }

            function _getRolesError() {
                console.log(response);
            }

            function _getInfoSuccess(data) {

                var id = data.item.userId
                vm.$rolesService.getRoleByUserId(id, vm.getUserRolesSuccess, vm.getUserRolesError);
            }


            function _getUserRolesSuccess(data){
                var userRole = data.item;
                vm.$userRoleService.getUserRole(userRole);
                vm.getAccess();
            }

            function _getInfoError(response) {
                console.log(response);
            }
          
            function _receiveItems(data) {
                vm.notify(function () {
                    vm.spaces = data.items;
                  
                });
            }

            function _getUserRolesError(response){
                console.log(response);
            }

            function _onReceiveError(jqXhr, error) {
                console.log(error);
            }

            function onSpaceByIdError(jqXhr, error) {
                console.log(error);
            }

            function _onSpaceByIdError(jqXhr, error) {
                console.log(error);
            }

            function _getAccess() {
                var access = vm.access;
                access = vm.$userRoleService.userAccess();
                vm.notify(function () {
                    vm.access = access;
                });
            }

            function settings() {
                vm.access = {};
                vm.access.instructors = false;
            }
        }

        sabio.page.dashboardControllerFactory = function ($scope, $baseController, $uibModal, $userSettingService, $contactService, $dashboardSidebar, $userdashboardService, $alertService) {

            var vm = this;
            $baseController.merge(vm, $baseController);
            vm.$scope = $scope;
            vm.$scope.animationsEnabled = true;
            vm.$userSettingService = $userSettingService;
            vm.$dashboardSidebar = $dashboardSidebar;
            vm.$userdashboardService = $userdashboardService;
            vm.$alertService = $alertService;
            vm.notify = vm.$userSettingService.getNotifier($scope);
            vm.receiveSettings = _receiveSettings;
            vm.onError = _onError;
            vm.onAttendance = _onAttendance;
            vm.onGetLocationSuccess = _onGetLocationSuccess;
            vm.onGetLocationError = _onGetLocationError;
            vm.onCheckInSuccess = _onCheckInSuccess;
            vm.onCheckInError = _onCheckInError;

            render();
            vm.$contactService = $contactService;

            vm.open = function () {
                var modalSettings = {
                    animation: $scope.animationsEnabled,
                    templateUrl: 'modal-user-settings.html',
                    controller: '$modalController',
                    controllerAs: 'modal',
                    resolve: {
                        items: function () {
                            return vm.items;
                        }
                    }
                };
                var modalInstance = $uibModal.open(modalSettings);
                // modalInstance.result.then(vm.one, vm.two); for future use
            }

            vm.openContact = function () {
                var contactModal = {
                    animation: $scope.animationsEnabled,
                    templateUrl: 'modal-messaging-contactMessage.html',
                    controller: '$contactModalController',
                    controllerAs: 'contact',
                    resolve: {
                        items: function () {
                            return vm.items;
                        }
                    }
                };
                var contactModalInstance = $uibModal.open(contactModal);
            }

            function render() {
                vm.$userSettingService.get(vm.receiveSettings, vm.onError);
            }

            function _receiveSettings(data) {

                vm.notify(function () {
                    vm.items = data.items;
                    //console.log(vm.items)
                });
            }

            function _onError(jqXhr, error) {
                console.error(error);
            }

            function _modalInfo(mInfo) {
                vm.modalInfo = mInfo;
            }

            function _onAttendance() {

                navigator.geolocation.getCurrentPosition(vm.onGetLocationSuccess, vm.onGetLocationError, { enableHighAccuracy: true });
            }

            function _onGetLocationSuccess(data, status, xhr) {
                var latLong = 'Latitude=' + data.coords.latitude + '&Longitude=' + data.coords.longitude;
                vm.$dashboardSidebar.addLocation(latLong, vm.onCheckInSuccess);
            }

            function _onGetLocationError(jqXHR, textStatus, errorThrown) {
                vm.error = "Device does not support location! Please enable location service on this device, or check in from a device that does have location enabled.";
                console.log(vm.error);
                vm.$alertService.onError(vm.error);
            }

            function _onCheckInSuccess(data) {
                if (data.item.distanceInMeters < 100) {
                    vm.success = "You have successfully checked in the " + data.item.campusName + " campus!";
                    vm.$alertService.onSuccess(vm.success);
                } else {
                    _onCheckInError(data);
                }
            }

            function _onCheckInError(data) {
                vm.error = "Check in failed! You appear to be " + data.item.distanceInMeters + " meters from the " + data.item.campusName + " campus.";
                vm.$alertService.onError(vm.error);
            }

            console.log(vm.myMessage);
        }

        sabio.page.modalControllerFactory = function ($scope, $modalInstance, items, $userSettingService) {
            var vm = this;
            vm.$scope = $scope;
            vm.items = items;
            vm.settingId = null;
            vm.settingValue = null;
            vm.submitData = _submitData;
            vm.modalInstance = $modalInstance;
            vm.$userSettingService = $userSettingService;
            vm.changedSetting = _changedSetting;
            vm.onSettingError = _onSettingError
            vm.selected = {
                item: vm.items[0]
            }

            vm.cancel = function () {
                $modalInstance.close();
            }

            function _submitData(settingId, value) {
                var settingData = {};

                settingData.settingId = settingId;
                settingData.settingValue = value;

                vm.$userSettingService.put(settingData, vm.changedSetting, vm.onSettingError);
            }

            function _changedSetting() {
                console.log("success");
            }

            function _onSettingError(jqXhr, error) {
                console.error(error);
            }
        }

        sabio.page.contactFactory = function ($scope, $contactModalInstance, items, $contactService, $alertService) {
            var vm = this;
            vm.$scope = $scope;
            vm.contactModalInstance = $contactModalInstance;
            vm.items = items;
            vm.$contactService = $contactService;
            vm.$alertService = $alertService;
            vm.contact = null;
            vm.receiveContactData = _receiveContactData;
            vm.onContactError = _onContactError;
            vm.contactUsEmail = null;
            vm.contactUsSubject = null;
            vm.contactUsMessage = null;

            function _receiveContactData(contactData) {
                vm.success = "We received your message.";
                vm.$alertService.onSuccess(vm.success);
            }

            function _onContactError(jqXhr, error) {
                vm.error = "Message not received. Please try again.";
                vm.$alertService.onError(vm.error);
            }

            vm.ok = function () {
                var contactData = { FormEmail: vm.contactUsEmail, FormSubject: vm.contactUsSubject, FormMessage: vm.contactUsMessage }
                vm.$contactService.contactMessage(contactData, vm.receiveContactData, vm.onContactError);
                $contactModalInstance.close();
            };

            vm.cancel = function () {
                $contactModalInstance.dismiss('cancel');
            };
        }

        sabio.ng.addService(sabio.ng.app.module
             , "$dashboardSidebar"
             , ["$baseService"]
             , sabio.services.dashboardSidebarFactory)

        sabio.ng.addService(sabio.ng.app.module
            , "$sidebarServices"
            , ["$baseService"]
            , sabio.services.dashboardSidebarFactory);

        sabio.ng.addService(sabio.ng.app.module
                    , "$contactService"
                    , ["$baseService"]
                    , sabio.services.contactFactory);

        sabio.ng.addService(sabio.ng.app.module
            , "$userSettingService"
            , ["$baseService"]
            , sabio.services.modalFactory);

        sabio.ng.addController(sabio.ng.app.module
            , "$contactModalController"
            , ['$scope', '$modalInstance', 'items', '$contactService', '$alertService']
            , sabio.page.contactFactory);

        sabio.ng.addController(sabio.ng.app.module
            , "$modalController"
            , ['$scope', '$modalInstance', 'items', '$userSettingService']
            , sabio.page.modalControllerFactory);

        sabio.ng.addController(sabio.ng.app.module
            , "$sidebarController"
            , ['$scope', '$baseController', '$sidebarServices', '$userDashboardService', '$userRoleService', '$rolesService']
            , sabio.page.sidebarControllerFactory);

        sabio.ng.addController(sabio.ng.app.module
           , "$dashboardController"
           , ['$scope', '$baseController', '$uibModal', '$userSettingService', '$contactService', '$dashboardSidebar', '$alertService']
           , sabio.page.dashboardControllerFactory);

        sabio.ng.addService(sabio.ng.app.module
                  , "$userDashboardService"
                  , ["$baseService"]
                  , sabio.services.userDashboardFactory);

    </script>


    <!--
        SabioRazor: notice that this script is not required and that it will be
        rendered at the
        very bottom of the rendered HTML file
        -->
    @RenderSection("scripts", required: false)
    <!-- User Settings, modal which opens from Settings link (found in top right user menu) and the Cog link (found in sidebar user info) -->

    <script type="text/ng-template" id="modal-user-settings.html">
        <!-- Modal Header -->
        <div class="modal-header text-center">
            <h2 class="modal-title"><i class="fa fa-pencil"></i> Settings</h2>
        </div>
        <!-- END Modal Header -->
        <!-- Modal Body -->
        <div class="modal-body">
            <form action="index.html" method="post" enctype="multipart/form-data" class="form-horizontal form-bordered" onsubmit="return false;">
                <fieldset>
                    <legend>Basic Settings</legend>
                    <div class="form-group">
                        <label class="col-md-4 control-label">Username</label>
                        <div class="col-md-8">
                            <p class="form-control-static">Admin</p>
                        </div>
                    </div>
                    <div class="form-group animate-repeat" data-ng-repeat="items in modal.items track by items.settingId">
                        <label class="col-md-4 control-label" for="user-settings-value">{{items.name}}</label>
                        <div class="col-md-8">
                            <input class="hidden" id="{{items.settingId}}" name="settingId" value="{{items.settingId}}" />
                            <label class="switch switch-primary">
                                <input type="checkbox"
                                       id="user-settings-value{{items.settingId}}"
                                       name="value"
                                       data-ng-model="items.value" ng-true-value="'True'" ng-false-value="'False'"
                                       data-ng-click="modal.submitData(items.settingId, items.value);">
                                <span></span>
                            </label>
                        </div>
                    </div>
                </fieldset>
                <div class="form-group form-actions">
                    <div class="col-xs-12 text-right">
                        <a href="#" class="pull-left moreSettings"><i class="fa fa-gear"></i><strong> More Settings</strong></a>
                        <button type="button" class="btn btn-sm btn-default" data-dismiss="modal" data-ng-click="modal.cancel()">Close</button>
                        @*<button type="submit" class="btn btn-sm btn-primary" data-ng-click="modal.ok();">Save Changes</button>*@
                    </div>
                </div>
            </form>
        </div>
        <!-- END Modal Body -->
    </script>

    <!--Contact Us Modal-->
    <script type="text/ng-template" id="modal-messaging-contactMessage.html">
        <div class="modal-header text-center">
            <h2 class="modal-title"><i class="fa fa-paper-plane"></i> Contact Us</h2>
        </div>
        <div class="modal-dialog" role="document">
            <div class="modal-header">
                @*<button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>*@
                <h4 class="modal-title" id="contactUs">Contact Us</h4>
            </div>
            <div class="modal-body">
                <form method="post" id="form-contact">
                    <div class="form-group">
                        <div>
                            <label for="contactUsEmail">Email</label>
                            <input type="email" class="form-control ng-class:{'error': contact.contactUsEmail.$valid}" id="contactUsEmail" ng-model="contact.contactUsEmail" name="FormEmail" @*class="form-control input-lg"*@ placeholder="Please enter a valid email address..." required>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            <label for="contactUsSubject">Subject</label>
                            <input type="text" class="form-control ng-class:{'error': contact.contactUsSubject.$valid}" id="contactUsSubject" ng-model="contact.contactUsSubject" ng-minlength="2" ng-maxlength="150" name="FormSubject" placeholder="Subject Field..." required>
                        </div>
                    </div>

                    <div class="form-group">
                        <div>
                            <label for="contactUsMessage">Message</label>
                            <textarea id="contactUsMessage" class="form-control ng-class:{'error': contact.contactUsMessage.$valid}" ng-model="contact.contactUsMessage" name="FormMessage" rows="10" placeholder="Let us know how we can assist.." required></textarea>
                        </div>
                    </div>
                </form>
                <div class="modal-footer">
                    <label class="successMessage" type="text" id="messageResponse"></label>
                    <button type="button" class="btn btn-default" data-dismiss="modal" ng-click="contact.cancel('cancel')">Close</button>
                    <button type="button" class="btn btn-primary" ng-click="contact.ok('close')">Send message</button>
                </div>
            </div>
        </div>
    </script>
</body>

</html>
