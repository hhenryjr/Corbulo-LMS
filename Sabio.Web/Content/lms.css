
pre {
    background: #fcfafa none repeat scroll 0 0;
    overflow: auto; /* override scrollbars from theme */
}

.header-content-buttons a{ margin-right:10px; }

/*  
    this is a hack to make the icons show up on the datepicker popup (next and back month buttons).
    the proUI theme has overridden all the glyphicon classes so that you have to use gi instead.
    rather than override the entire popup template I am faking the styles just for those two buttons 
*/

.error{ color:orangered;}
input.error {
    border:1px dashed orangered;
}

.sabio-gi .glyphicon.glyphicon-chevron-left:before{
    content:"\E225";
}

.sabio-gi .glyphicon.glyphicon-chevron-up:before{
    content:"\E219";
}

.sabio-gi .glyphicon.glyphicon-chevron-down:before{
    content:"\E220";
}

.sabio-gi .glyphicon{
    font-family: "Glyphicons Regular";
    display: inline-block;
    font-style: normal;
    font-weight: 400;
    line-height: 0.8;
    vertical-align: middle;     
}

.sabio-gi .glyphicon.glyphicon-chevron-right:before{
    content:"\E224";
}

.angular-ui-tree-handle {
    background: #f8faff;
    border: 1px solid #dae2ea;
    color: #7c9eb2;
    padding: 10px 10px;
}

.angular-ui-tree-handle:hover {
    color: #438eb9;
    background: #f4f6f7;
    border-color: #dce2e8;
}

.angular-ui-tree-placeholder {
    background: #f0f9ff;
    border: 2px dashed #bed2db;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

.group-title {
    background-color: #687074 !important;
    color: #FFF !important;
}


/* --- Tree --- */
.tree-node {
    border: 1px solid #dae2ea;
    background: #f8faff;
    color: #7c9eb2;
}

.nodrop {
    background-color: #f2dede;
}

.tree-node-content {
    margin: 10px;
}
.tree-handle {
    padding: 10px;
    background: #428bca;
    color: #FFF;
    margin-right: 10px;
}

.angular-ui-tree-handle:hover {
}

.angular-ui-tree-placeholder {
    background: #f0f9ff;
    border: 2px dashed #bed2db;
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;
}

*/
/**
 * For the correct positioning of the placeholder element, the dnd-list and
 * it's children must have position: relative
 */
.dragger ul[dnd-list],
.dragger ul[dnd-list] > li {
	position: relative;
}

/**
 * The dnd-list should always have a min-height,
 * otherwise you can't drop to it once it's empty
 */
.dragger ul[dnd-list] {
    min-height: 42px;
    padding-left: 0px;
}

/**
 * The dndDraggingSource class will be applied to
 * the source element of a drag operation. It makes
 * sense to hide it to give the user the feeling
 * that he's actually moving it.
 */
.dragger ul[dnd-list] .dndDraggingSource {
    display: none;
}

/**
 * An element with .dndPlaceholder class will be
 * added to the dnd-list while the user is dragging
 * over it.
 */
.dragger ul[dnd-list] .dndPlaceholder {
    display: block;
    background-color: #ddd;
    min-height: 42px;
}

/**
 * The dnd-lists's child elements currently MUST have
 * position: relative. Otherwise we can not determine
 * whether the mouse pointer is in the upper or lower
 * half of the element we are dragging over. In other
 * browsers we can use event.offsetY for this.
 */
.dragger ul[dnd-list] li {
    background-color: #fff;
    border: 1px solid #ddd;
    border-top-right-radius: 4px;
    border-top-left-radius: 4px;
    display: block;
    padding: 10px 15px;
    margin-bottom: -1px;
}

/**
 * Show selected elements in green
 */
.dragger ul[dnd-list] li.selected {
    background-color: #dff0d8;
    color: #3c763d;
}